<h1 style="text-align:center">@ViewBag.RoomId</h1>

<div video-grid>

</div>

<script src="~/js/signalr/dist/browser/signalr.js"></script>
<script src="https://unpkg.com/peerjs@1.5.2/dist/peerjs.min.js"></script>

<script>
    const ROOM_ID = '@ViewBag.RoomId';
    let userId = null;
    let localStream = null;
    //const Peers = {};

    const connection = new signalR.HubConnectionBuilder()
        .withUrl("/meeting").build();

    const myPeer = new Peer();

    myPeer.on('open', id => {
        userId = id;
        const startSignalR = async () =>{
            await connection.start()
            await connection.invoke("JoinRoom",ROOM_ID,userId)
        }
        startSignalR();
    })

    const videoGrid = document.querySelector('[video-grid]');
    const myVideo = document.createElement('video');
    myVideo.muted = true;

    navigator.mediaDevices.getUserMedia({
        audio:true,
        video:true
    }).then(stream =>{
        addVideoStream(myVideo, stream);

        localStream = stream;
    })

    connection.on('user-connection', id => {
        if (id === userId) return;
        console.log(`User connected:${id}`)
        connectNewUser(id, localStream)
    })
    
    connection.on('user-disconnection', id => {
        console.log(`User disconnected:${id}`);

        // if (Peers[id]) Peers[id].close();
    })

    myPeer.on('call', call => {
        call.answer(localStream);

        const userVideo = document.createElement('video');
        call.on('stream', userViderStream => {
            addVideoStream(userVideo, userViderStream);
        })

        // call.on('close', () => {
        //     userVideo.remove();
        // })

        //Peers[userId] = call;
    })

    const addVideoStream = (video, stream) => { 
        video.srcObject = stream,
            video.addEventListener('loadedmetadata', () => {
                video.play()
            })

        videoGrid.appendChild(video)
    }

    const connectNewUser = (userId, localStream) => {
        const userVideo = document.createElement('video');
        const call = myPeer.call(userId, localStream);

        call.on('stream', userVideoStream => {
            addVideoStream(userVideo,userVideoStream)
        })
    }

</script>